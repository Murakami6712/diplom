import sqlite3
from mtranslate import translate


class Users:


    def __init__(self, filename: str) -> None: #–∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å
        
        self.filename = filename
        self.timeout = 5
        self.create_table()

    
    def create_table(self) -> None: #—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ñ–∏–ª–µ? –î–ê

        sql = ''' 
        CREATE TABLE IF NOT EXISTS users
        (id INTEGER PRIMARY KEY UNIQUE,
        user_name STRING,
        first_name STRING,
        name STRING DEFAULT NULL,
        photo STRING DEFAULT NULL,
        city STRING DEFAULT NULL,
        about STRING DEFAULT NULL,
        gender STRING DEFAULT NULL,
        target STRING DEFAULT NULL,
        status INTEGER DEFAULT 0,
        city_ru STRING DEFAULT NULL);'''

        with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
            cursor = connect.cursor()
            cursor.execute(sql)
            connect.commit()


    def get_pair(self, user_id: int, state: set) -> tuple: #–î–µ–ª–∞–µ—Ç –ø–∞—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥

        my_profile = self.get_profile(user_id)
        
        if my_profile is None:
            return -1
        
        city_ru = my_profile[10]
        targets = my_profile[8].split()

        sql = '''SELECT * FROM users WHERE id <> ? AND status = 1 AND city_ru = ?;'''
        data = (user_id, city_ru,)
        with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
            cursor = connect.cursor()
            cursor.execute(sql, data)
            result = cursor.fetchall()

        for user in result:
            if user[0] not in state:
                for target in targets:
                    if target == user[7]:
                        return user
        return None


    def add_user(self, user_id: str, user_name: str, first_name: str) -> None: #–¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –î–∞

        sql = '''
        INSERT INTO users (id, user_name, first_name) VALUES (?, ?, ?);'''
        data = (user_id, user_name, first_name,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)


    def enable_user(self, user_id: int) -> None: #–æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –î–∞
        
        sql = '''
            UPDATE users
            SET status = 1
            WHERE id = ?;'''
        data = (user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)


    def disable_user(self, user_id: int) -> None: #—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        sql = '''
            UPDATE users
            SET status = 0
            WHERE id = ?;'''
        data = (user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
            
        except Exception as e:
            print(e)


    def add_target(self, user_id: int, target: str) -> None: #–í—ã–±–∏—Ä–∞–µ—Ç —Ü–µ–ª—å –ø–æ–∏—Å–∫–∞ (–ø–∞—Ä–µ–Ω—å/–¥–µ–≤—É—à–∫–∞)

        sql = '''
            UPDATE users
            SET target = ?
            WHERE id = ?;'''
        data = (target, user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
            self.enable_user(user_id)
        except Exception as e:
            print(e)


    def add_gender(self, user_id: int, gender: str) -> None: #—Å–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–¥–µ—Ä –≤ –ë–î

        sql = '''
            UPDATE users
            SET gender = ?
            WHERE id = ?;'''
        data = (gender, user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)


    def add_about(self, user_id: int, about: str) -> None: #—Å–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ë–î

        sql = '''
            UPDATE users
            SET about = ?
            WHERE id = ?;'''
        data = (about, user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)
    

    def add_city(self, user_id: int, city: str) -> None: #—Å–æ–∑–¥–∞–µ—Ç –≥–æ—Ä–æ–¥ –≤ –ë–î

        sql = '''
            UPDATE users
            SET city = ?, city_ru = ?
            WHERE id = ?;'''
        city_ru = city
        try:
            city_ru = translate(city, 'ru')
        except Exception as e:
            print(e)
        data = (city, city_ru, user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)


    def add_name(self, user_id: int, name: str) -> None: #–∏–º—è –≤ –ë–î

        sql = '''
            UPDATE users
            SET name = ?
            WHERE id = ?;'''
        data = (name, user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)


    def add_photo(self, user_id: int, photo_id: str) -> None: #—Ñ–æ—Ç–æ –≤ –ë–î

        sql = '''
            UPDATE users
            SET photo = ?
            WHERE id = ?;'''
        data = (photo_id, user_id,)
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
        except Exception as e:
            print(e)


    def get_profile(self, user_id: int) -> list: #–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–¥

        sql = '''SELECT * FROM users WHERE id = ? LIMIT 1;'''
        data = (user_id, )
        with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
            cursor = connect.cursor()
            cursor.execute(sql, data)
            result = cursor.fetchone()
        return result
    

    def do_something(self, sql: str, data: tuple) -> None: #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤

        with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
            cursor = connect.cursor()
            cursor.execute(sql, data)
            result = cursor.fetchall()
            connect.commit()
        return result




class Languages:


    def __init__(self, filename: str) -> None: #—è–∑—ã–∫–∏? –î–∞ –∏—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–ª–∞—Å—Å–µ
        
        self.filename = filename
        self.timeout = 5
        self.create_table()


    def create_table(self) -> None: # —Å–æ–∑–¥–∞–µ—Ç –±–¥ —Å —è–∑—ã–∫–∞–º–∏

        sql = '''
        CREATE TABLE IF NOT EXISTS lenguages
        (id INTEGER PRIMARY KEY UNIQUE,
        language_code STRING DEFAULT "UK üá∫üá¶" NOT NULL);'''
        with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
            cursor = connect.cursor()
            cursor.execute(sql)
            connect.commit()


    def add_user(self, user_id: int) -> bool: # –¥–æ–±–∞–≤–ª—è–µ—Ç —è–∑—ã–∫ —é–∑–µ—Ä–∞

        sql = '''
            INSERT INTO lenguages(id)
            VALUES(?);'''
        data = (user_id, )
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
            return True
        except Exception as e:
            return False


    def update_lang(self, user_id: int, lang: str) -> bool: # –æ–±–Ω–æ–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        self.add_user(user_id)
        sql = '''
            UPDATE lenguages
            SET language_code = ?
            WHERE id = ?;'''
        data = (lang, user_id, )
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                connect.commit()
            return True
        except Exception as e:
            return False


    def get_lang(self, user_id: int) -> str: # –ø–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        lang = 'uk'
        sql = '''SELECT language_code FROM lenguages WHERE id = ? LIMIT 1;'''
        data = (user_id, )
        try:
            with sqlite3.connect(self.filename, timeout=self.timeout) as connect:
                cursor = connect.cursor()
                cursor.execute(sql, data)
                result = cursor.fetchone()
            if result is not None:
                lang = result[0]
        except Exception as e:
            print(e)
        
        return lang



if __name__ == "__main__": # –∑–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã

    db_fname = "users.db"
    users = Users(db_fname)
    #users.add_user(12345678)